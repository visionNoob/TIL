1
00:00:00,000 --> 00:00:04,980
안녕하세요, 다음은 나누기 함수입니다. 나누기 함수에 대해 살펴보겠습니다.


2
00:00:04,980 --> 00:00:08,240
감소 함수에 대한 몇 가지 비디오가 있습니다.


3
00:00:08,240 --> 00:00:13,000
이것은 나누기 함수라고 불립니다. 알고리즘이나 함수에서


4
00:00:13,000 --> 00:00:17,600
n을 전달받으면 n을 2로 나누어 호출하기 때문입니다.


5
00:00:17,600 --> 00:00:23,060
알고리즘이 어떤 매개변수를 받는다면, 예를 들어 n이라면


6
00:00:23,720 --> 00:00:29,980
n의 값을 n-1로 줄일 수 있습니다. 즉, 빼기


7
00:00:30,000 --> 00:00:35,360
또는 감소시키거나 n을 2로 나누는 것입니다. 즉, 나누기 또는


8
00:00:35,360 --> 00:00:38,360
루트 n, 즉 루트 함수입니다.


9
00:00:39,680 --> 00:00:46,580
이 모든 경우에 대해 알고리즘이나 재귀 함수가 다시 호출되는 다양한 유형의 함수가 있을 수 있습니다.


10
00:00:46,580 --> 00:00:49,620
n의 루트 값이나


11
00:00:49,620 --> 00:00:56,060
나누어진 n의 값 또는 감소된 n의 값으로 이미 감소된 n의 값 함수가 있습니다.


12
00:00:56,060 --> 00:00:59,680
이것은 함수의 나누기 값입니다. 그 비디오를 보지 않았다면


13
00:00:59,680 --> 00:01:03,000
지금 볼 수 있습니다. 이제 이것을 해결해 봅시다.


14
00:01:03,000 --> 00:01:09,800
재귀 관계를 준비해 봅시다. 이 알고리즘이 t n 시간을 소요한다고 말할 것입니다.


15
00:01:10,700 --> 00:01:16,100
이 안에 두 개의 문장이 있으므로 하나의 단위 시간이 걸리고, 이것이 t n일 때


16
00:01:16,100 --> 00:01:18,820
t n을 2로 나눈 것은 무엇입니까?


17
00:01:19,820 --> 00:01:27,080
그러면 방정식은 t n은 이 두 개와 같으므로 t n을 2로 나눈 것입니다.


18
00:01:27,520 --> 00:01:28,500
더하기 1


19
00:01:31,000 --> 00:01:38,140
이것이 재귀 관계입니다. 이제 그 재귀 관계를 여기 t n은


20
00:01:38,840 --> 00:01:40,900
t n을 2로 나눈 것


21
00:01:40,900 --> 00:01:42,460
더하기 1


22
00:01:42,460 --> 00:01:44,980
n일 때


23
00:01:45,760 --> 00:01:49,680
여기서 1을 썼다는 것을 보세요.


24
00:01:49,680 --> 00:01:53,380
1을 썼습니다. 그래서 n이 1보다 크면 이것이 발생합니다.


25
00:01:54,220 --> 00:01:59,660
n이 1과 같으면 아무것도 없습니다. 그래서 상수를 취하거나


26
00:01:59,680 --> 00:02:00,940
1을 씁니다.


27
00:02:02,340 --> 00:02:02,880
상수


28
00:02:04,680 --> 00:02:10,260
이것이 재귀 관계입니다. 이제 트리 방법을 사용하여 이것을 해결해 봅시다.


29
00:02:10,860 --> 00:02:12,740
재귀 트리 방법


30
00:02:13,660 --> 00:02:15,120
t n이 호출됩니다.

31
00:02:15,120 --> 00:02:22,280
단계 1과 t n을 2로 나눈 것은 무엇인가요? 그래서 이것이 1이고 이것이 t n을 2로 나눈 것입니다.


32
00:02:23,440 --> 00:02:29,160
t n이 걸리는 시간은 얼마인가요? 1 플러스 이 시간에 걸리는 시간, 우리는 이 시간에 대해 모릅니다.


33
00:02:29,160 --> 00:02:36,640
그래서 이것은 무엇인가요? 이것은 1 플러스 t n을 2로 나눈 것을 제곱한 것입니다. 그래서 다시 n을 2로 나눈 것입니다.


34
00:02:37,960 --> 00:02:43,620
그래서 이것은 1 t n을 2로 나눈 것을 세제곱한 것입니다.


35
00:02:46,160 --> 00:02:53,280
얼마나 오래 계속할까요? 우리는 k번 계속할 것이라고 말합니다. 그래서 k번 계속하면 이것은


36
00:02:54,220 --> 00:02:58,160
t n을 2의 k제곱으로 나눈 것이 됩니다.


37
00:02:59,940 --> 00:03:05,640
이것이 계속 나누어질 때 마지막에 무엇을 얻게 될까요?


38
00:03:05,640 --> 00:03:11,380
나누기와 곱셈의 단위 값은 1입니다.


39
00:03:11,960 --> 00:03:14,340
그래서 1에서 멈춰야 합니다.


40
00:03:15,500 --> 00:03:19,060
우리는 n이 1일 때 답이 1이라는 것을 알고 있습니다.


41
00:03:19,600 --> 00:03:23,540
그래서 계속 나누는 목적은 1에 도달하는 것입니다.


42
00:03:23,540 --> 00:03:29,940
그래서 우리는 n을 2의 k제곱으로 나눈 것이 1에 도달했다고 가정합니다.


43
00:03:31,740 --> 00:03:33,780
이제 시간을 봅시다.


44
00:03:33,780 --> 00:03:41,140
여기서 한 단계, 그 다음 한 단계, 각각 한 단계씩 있습니다.


45
00:03:41,140 --> 00:03:47,760
이것이 몇 번 걸릴까요? 한 단계씩, 총 몇 단계가 있나요? 우리는 k번 하고 있습니다.


46
00:03:47,760 --> 00:03:50,280
그래서 이것들은 k단계입니다.


47
00:03:52,220 --> 00:03:52,780
그래서


48
00:03:52,780 --> 00:03:59,200
시간은 k입니다. 이는 이 트리가 가지고 있는 단계 수나 레벨 수에 따라 다릅니다.


49
00:03:59,200 --> 00:04:05,140
그래서 이것은 k와 같습니다. 한 번, 두 번, 세 번, k번까지입니다.


50
00:04:06,940 --> 00:04:10,960
그리고 우리는 n을 2의 k제곱으로 나눈 것이 1이라는 것을 알고 있습니다.


51
00:04:10,960 --> 00:04:15,200
n을 2의 k제곱으로 나눈 것이 1이기 때문에


52
00:04:15,200 --> 00:04:20,040
n은 2의 k제곱과 같습니다. 그러면 k는 무엇인가요?


53
00:04:20,280 --> 00:04:24,420
k는 log n의 밑이 2입니다.


54
00:04:25,360 --> 00:04:31,180
이 지수를 이쪽으로 보내면 log n의 밑이 2가 됩니다.


55
00:04:31,800 --> 00:04:36,020
여기 쓸게요. 만약 2의 5제곱이


56
00:04:36,640 --> 00:04:37,140
32라면


57
00:04:37,800 --> 00:04:42,620
그러면 5는 log 32의 밑이 2입니다.


58
00:04:44,060 --> 00:04:46,100
log 32의 밑이 2입니다.


59
00:04:46,100 --> 00:04:54,620
즉, a의 b제곱이 c라면 b는 log


60
00:04:54,620 --> 00:04:56,820
c의 밑이 a입니다.

61
00:04:56,820 --> 00:05:00,620
그래서 같은 방식으로 2의 k승은 n과 같습니다.


62
00:05:01,640 --> 00:05:08,280
2의 k승이 n과 같다면, k는 log n의 밑이 2인 로그입니다.


63
00:05:08,280 --> 00:05:14,380
그래서 끝입니다. 몇 단계가 걸리나요? k 단계입니다. 그러면 걸린 시간은?


64
00:05:14,380 --> 00:05:19,080
로그 n, k는 로그 n이므로, 이것의 답은


65
00:05:19,080 --> 00:05:23,640
로그 n의 차수(Order) 또는 빅 오(Big O) 로그 n입니다.


66
00:05:25,660 --> 00:05:32,040
그래서 끝입니다. 이것은 트리 방법(Tree method)을 사용한 것입니다. 이제 대입 방법(Substitution method)을 사용하여 같은 것을 풀어봅시다.


67
00:05:32,740 --> 00:05:34,740
대입법으로 이것을 풀어봅시다.


68
00:05:38,180 --> 00:05:40,500
T n은


69
00:05:41,480 --> 00:05:43,480
T n 나누기 2


70
00:05:43,480 --> 00:05:46,330
더하기 1입니다. 이것이 첫 번째 방정식입니다.


71
00:05:47,160 --> 00:05:55,380
그러면 T n 나누기 2는 무엇일까요? T n은 T n 나누기 2 더하기 1이므로


72
00:05:55,380 --> 00:06:04,140
그러면 T n 나누기 2는 무엇일까요? T n 나누기 2 나누기 2, 그래서 n 나누기 2의 제곱 더하기 1입니다.


73
00:06:06,280 --> 00:06:09,660
그래서 이것을 여기서 대입할 수 있습니다.


74
00:06:10,540 --> 00:06:17,940
그래서 이것은 T n은 T n 나누기 2의 제곱 더하기 1이 됩니다.


75
00:06:19,800 --> 00:06:23,140
이것에 더하기 1을 그대로 더합니다.


76
00:06:23,780 --> 00:06:30,600
T n은 T n 나누기 2의 제곱 더하기 1 더하기 1, 2입니다.


77
00:06:30,600 --> 00:06:36,060
이것들은 단지 상수 값 1, 1이기 때문에 더하고 있습니다.


78
00:06:36,060 --> 00:06:38,780
그래서 다음 단계에서 얻는 것은 무엇인가요?


79
00:06:40,280 --> 00:06:46,350
이것이 두 번째입니다. 그래서 다음 단계에서 얻는 것은 T n은


80
00:06:46,840 --> 00:06:49,800
T n 나누기 2의 세제곱


81
00:06:50,620 --> 00:06:52,000
더하기 3입니다.


82
00:06:56,100 --> 00:06:59,520
이렇게 계속하면 무엇을 얻을까요?


83
00:07:00,240 --> 00:07:04,460
T n은 T n 나누기 2의 k승


84
00:07:05,960 --> 00:07:07,360
더하기 k입니다.


85
00:07:08,500 --> 00:07:09,700
네 번째 방정식입니다.


86
00:07:12,500 --> 00:07:15,620
T n은 T n 나누기 2의 k승 더하기 k입니다.


87
00:07:15,620 --> 00:07:22,260
T n은 T n 나누기 2의 k승 더하기 k입니다.


88
00:07:23,120 --> 00:07:30,700
이제 n 나누기 2의 k승이 1이 되었다고 가정합니다. 즉, n은 1과 같습니다. 그래서 이것을 가정합니다.


89
00:07:32,060 --> 00:07:38,700
n 나누기 2의 k승은 1과 같습니다. 왜냐하면 우리는 그것을 1까지 줄이고 줄이고 있기 때문입니다.


90
00:07:38,700 --> 00:07:45,180
그래서 이것은 1이 되었습니다. 따라서 n은 2의 k승과 같습니다.

91
00:07:45,700 --> 00:07:48,480
k는 log n과 같습니다


92
00:07:51,800 --> 00:07:56,120
이제 T n은 T와 같습니다


93
00:07:57,040 --> 00:08:00,980
1 더하기 k는 log n입니다


94
00:08:02,160 --> 00:08:06,580
T n은 T 1과 같습니다. T 1은 1입니다


95
00:08:07,240 --> 00:08:09,360
1 더하기 log n


96
00:08:10,000 --> 00:08:14,260
그게 다입니다. 이것은 세타(Theta) 또는 빅 오(Big O) n입니다


97
00:08:17,280 --> 00:08:19,960
그래서 같은 답을 얻었습니다


98
00:08:19,960 --> 00:08:24,260
그래서 이 형태의 방정식 재귀 관계입니다


99
00:08:24,260 --> 00:08:26,500
우리는 log n이라는 답을 얻고 있습니다


100
00:08:26,500 --> 00:08:31,660
그래서 트리 방법과 대입 또는 귀납 방법을 사용하여 해결했습니다


101
00:08:31,660 --> 00:08:37,080
그리고 이것을 위한 마스터 정리(Master Theorem)도 있습니다. 그래서 몇 가지 재귀 관계를 볼 것입니다


102
00:08:37,080 --> 00:08:39,500
그런 다음 이것을 위한 마스터 정리를 볼 것입니다

