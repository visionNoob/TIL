1
00:00:00,000 --> 00:00:04,240
Next, let us see how to write an algorithm. Here already I have written one algorithm

2
00:00:04,240 --> 00:00:11,520
for swapping two numbers or two elements. See, I have used C language like syntax only.

3
00:00:11,680 --> 00:00:15,740
Only the thing I have done is here I wrote algorithm to show that okay I am writing

4
00:00:15,740 --> 00:00:21,240
an algorithm, it's not a program. Here, if I compare with a C program, here I have

5
00:00:21,240 --> 00:00:27,560
not written the data type of parameters. Yes, data types we don't decide at algorithm

6
00:00:27,560 --> 00:00:31,660
time. When we write a program, then we decide what data types are required.

7
00:00:33,000 --> 00:00:38,560
And here, even I don't have a temporary variable declaration. Declaration is not there. Directly

8
00:00:38,560 --> 00:00:42,020
it is used. It's understood. Unless you declare in the program, you cannot use it.

9
00:00:42,240 --> 00:00:46,680
But in an algorithm, we don't bother about those minor things that are related to language.

10
00:00:49,200 --> 00:00:56,000
This is more like C. Now if you want to write in a different way, you can say this as

11
00:00:58,180 --> 00:01:06,280
begin and this as end. Instead of lower brackets, you can also say begin and end.

12
00:01:08,920 --> 00:01:16,820
Next, you can use this symbol also for assignment. Actually, this is an assignment

13
00:01:16,820 --> 00:01:22,720
symbol that was used in some old languages like Pascal language. So you can use that one.

14
00:01:23,600 --> 00:01:33,540
Or else, you can use this symbol for showing that this value is stored at this one.

15
00:01:36,660 --> 00:01:41,000
So now it's up to you how you want to write it. I hope whatever I wrote, you have understood

16
00:01:41,000 --> 00:01:45,180
it. So same way, whatever you write, I should be able to understand, at least you should be able

17
00:01:45,180 --> 00:01:49,660
to understand it. Or the people who are involved in the project should be able to understand it.

18
00:01:49,660 --> 00:01:51,750
People who are using it should be able to understand it.

19
00:01:53,000 --> 00:01:58,860
Right? So you can use any syntax. There is no fixed syntax for writing any algorithm.

20
00:01:59,600 --> 00:02:05,660
Let's see how to analyze an algorithm. What is the criteria on which we analyze an algorithm?

21
00:02:06,420 --> 00:02:10,020
So the criteria is, the first criteria is time.

22
00:02:12,720 --> 00:02:18,720
See the algorithms are the procedures for solving problem. Whether you do it manually using pen and

23
00:02:18,720 --> 00:02:26,100
paper or you make a program and let your machines do it. Whatever the method may be,

24
00:02:26,720 --> 00:02:31,720
how much time it is taking. If the procedure is very lengthy and time consuming or whether

25
00:02:31,720 --> 00:02:36,460
the procedure is very fast and quickly you can get the results. So that is one of the

26
00:02:36,460 --> 00:02:41,680
important criteria on which we have to analyze. If you are devising a procedure or an algorithm,

27
00:02:42,220 --> 00:02:48,240
then it should be time efficient. Means it must be faster. So after writing the algorithms,

28
00:02:48,240 --> 00:02:55,880
we analyze how much time it is taking. So that time what we get is in the time in the form of a

29
00:02:55,880 --> 00:03:03,620
function. We get a function, time function. We not get the watch time already I have shown you.

30
00:03:04,100 --> 00:03:09,100
You will get the function, time function. Now next is space.

31
00:03:15,400 --> 00:03:19,900
As the algorithm is going to be converted into a program and it's going to run on the machine,

32
00:03:19,900 --> 00:03:26,900
then we need to know how much memory space it will consume. So that is the second criteria on

33
00:03:26,900 --> 00:03:32,460
which we will analyze an algorithm. So these are the two major criteria on which the algorithms

34
00:03:32,460 --> 00:03:41,840
are analyzed. And furthermore if you have any other criteria and furthermore if you have

35
00:03:41,840 --> 00:03:47,780
any other criteria or any other factors you want to consider, you can consider them like.

36
00:03:48,420 --> 00:03:48,820
Now,

37
00:03:56,080 --> 00:04:03,340
nowadays every application is either internet based or web based or say cloud based. So data

38
00:04:03,340 --> 00:04:09,740
transfer or network consumption is also an important criteria. How much data is going

39
00:04:09,740 --> 00:04:14,660
to be transferred? See if the algorithm or means if a procedure that you're writing,

40
00:04:14,660 --> 00:04:20,580
if it's unnecessary transferring to larger size data or it can be reduced or compressed,

41
00:04:20,860 --> 00:04:26,720
whatever it is. So that is one more important criteria that is how much data transfer is done.

42
00:04:32,320 --> 00:04:37,320
And nowadays most of the devices are handheld instead of PCs we are using

43
00:04:37,320 --> 00:04:42,680
pound drops and laptops and tablets. Then power consumption is also a criteria.

44
00:04:43,740 --> 00:04:45,600
How much power it is consuming?

45
00:04:48,180 --> 00:04:55,040
And one more criteria is if you are developing an algorithm for device drivers or system level

46
00:04:55,040 --> 00:05:01,260
programming, if you are developing something, some algorithm if you are writing, then

47
00:05:01,260 --> 00:05:08,020
you may also need to know how much CPU registers it is consuming.

48
00:05:11,700 --> 00:05:17,100
So CPU will also have some memory called as registers. How many registers it is consuming?

49
00:05:17,100 --> 00:05:23,080
That's also one of the worrying factor when you are designing an algorithm or writing a program

50
00:05:23,080 --> 00:05:28,540
family. So these are a few criterias I have listed and it depends on your requirement,

51
00:05:28,780 --> 00:05:34,100
it depends on your project, right? What are the more criterias you need to analyze?

52
00:05:36,060 --> 00:05:40,580
Now let us see, I have taken one example to show you how we analyze an algorithm.

53
00:05:41,020 --> 00:05:45,180
So for analysis purpose, we need to know the time. So first we'll do time analysis.

54
00:05:45,980 --> 00:05:51,280
Then we'll do space analysis. Now time means how much time this will take?

55
00:05:52,420 --> 00:05:55,920
This is not the watch time. Then how to assume? Now we say that

56
00:05:55,920 --> 00:06:02,220
every statement in an algorithm takes one unit of time. Every simple statement

57
00:06:02,220 --> 00:06:08,860
in an algorithm takes one unit of time. If suppose the algorithm is calling another algorithm,

58
00:06:09,020 --> 00:06:12,700
it's using another procedure, then we have to analyze that also in detail.

59
00:06:12,700 --> 00:06:20,360
So simple means just a statement, it's not a nested statement, right? So single statement,

60
00:06:20,700 --> 00:06:26,320
each statement takes one unit of time. So here I assume it takes one unit of time,

61
00:06:26,640 --> 00:06:31,080
one unit of time, one unit. So total time is three. So the time function

62
00:06:31,080 --> 00:06:37,300
f of n is three. Here we got the constant value because I have taken a very simple algorithm

63
00:06:37,300 --> 00:06:43,220
and the answer is three, that is some constant value, right? Three or thirty, whatever it is,

64
00:06:43,260 --> 00:06:48,940
it is constant value, fixed value we got. So there's a time function, but it's not in

65
00:06:48,940 --> 00:06:56,620
terms of n, just we got a constant value. Now here, whatever the complexity in the statement

66
00:06:56,620 --> 00:07:01,020
may be, how lengthy the statement will be, we say that it takes one unit of time.

67
00:07:01,580 --> 00:07:09,240
Let us assume instead of this statement, I have some statement saying x assign five into

68
00:07:09,820 --> 00:07:16,340
a plus six into b, if this is the statement written in an algorithm.

69
00:07:17,300 --> 00:07:19,940
Then for this also we say it takes one unit of time.

70
00:07:22,540 --> 00:07:27,380
But really if you see when you convert into a program and finally when it gets converted into

71
00:07:27,380 --> 00:07:33,100
machine code, then how many statements it will have for each multiplication?

72
00:07:34,160 --> 00:07:40,100
Two statements. Then for addition one statement, the assignment one statement. So total four

73
00:07:40,100 --> 00:07:46,000
statements will be there. But we don't want to go into that much detail, we don't want to see

74
00:07:46,000 --> 00:07:51,500
how it's going to get converted into machine code, but simply we analyze and say each statement

75
00:07:51,500 --> 00:07:59,280
takes one unit of time. Now suppose if you want to go into detail analysis like this,

76
00:07:59,480 --> 00:08:05,940
you can go into detail. You can imagine up to the level of the machine code that's going to be

77
00:08:05,940 --> 00:08:13,820
generated. It is just like suppose you want to travel to your friend's house in a car,

78
00:08:14,480 --> 00:08:17,320
you don't have to think and you don't have to plan and analyze,

79
00:08:17,320 --> 00:08:22,140
simply you can take a car or your bike, your vehicle and you can just start and

80
00:08:22,140 --> 00:08:29,040
reach its place. Right, that's simple. If you want to land on Mars,

81
00:08:30,160 --> 00:08:36,820
then simply you cannot take a satellite, simply you cannot take a rocket and launch it and

82
00:08:36,820 --> 00:08:43,720
reach there. It's not easy. So you have to analyze and design and make a complete plan so

83
00:08:43,720 --> 00:08:49,820
that your mission is successful. So that's it. Here you need to go into each and every minor

84
00:08:49,820 --> 00:08:54,660
detail you have to take care of it. So it depends on your requirement. So if you want

85
00:08:54,660 --> 00:09:00,260
to analyze into greater detail, then do it. So the point of view, we will be doing it at

86
00:09:00,260 --> 00:09:07,280
basic level. At a very shallow level, this brief analysis we will do will not go into much

87
00:09:07,280 --> 00:09:12,640
detail. But much detail analysis can also be done.

88
00:09:14,940 --> 00:09:22,080
Next is space analysis. What are the variables used here? For a space, I'll write down the

89
00:09:22,080 --> 00:09:27,840
variables. A is one parameter, B is also a parameter and temp is the local variable used.

90
00:09:28,540 --> 00:09:34,720
So total how many variables? One, two and three. So there are three variables used.

91
00:09:34,720 --> 00:09:42,560
So the space is constant again, it is just three, I got the answer as three.

92
00:09:43,180 --> 00:09:50,220
So here it is also constant. So usually we represent them as order of one, constant means

93
00:09:50,220 --> 00:09:59,560
order of one. And that's also order of one, means it is constant, one represents constant.

94
00:09:59,560 --> 00:10:04,260
If it is three also we write one, if it is three thousand also we write one,

95
00:10:04,460 --> 00:10:10,800
saying that it is constant, value is constant. So this is how each statement is taken as

96
00:10:10,800 --> 00:10:17,120
one order of time and each variable is taken as one word. So these are

97
00:10:20,360 --> 00:10:28,080
three words. Why we are saying words there, not bytes? We don't know. When we converted to a

98
00:10:28,080 --> 00:10:33,060
program it may be an integer type or float type or double type that we don't know.

99
00:10:33,420 --> 00:10:35,840
So that's why we say it is taking words.

