1
00:00:00,000 --> 00:00:12,220
안녕하세요, 친구들. 알고리즘(Algorithm) 과목에 대한 강의를 시작하려고 합니다. 알고리즘은 컴퓨터 공학 학생들에게 공통 과목입니다.


2
00:00:12,600 --> 00:00:20,460
대부분의 대학에서는 이 과목을 커리큘럼의 일부로 제공합니다. 그리고 이 과목은 매우 핵심적이고 중요한 과목입니다.


3
00:00:21,500 --> 00:00:27,360
학생들이 이 과목의 몇몇 주제에서 어려움을 겪고, 명확하게 이해하지 못하는 경우가 있습니다.


4
00:00:28,480 --> 00:00:38,500
그래서 저는 이 과목을 점점 더 쉽게 만들어 여러분이 쉽게 이해하고 연습할 수 있으며, 쉽게 기억할 수 있도록 하려고 합니다.


5
00:00:39,480 --> 00:00:47,460
이 과목의 중요성은 이론 시험 외에도 경쟁 시험에서도 중요하다는 점입니다.


6
00:00:48,060 --> 00:00:57,620
프로그래밍 대회에서도 대부분 이 과목에서 문제를 출제합니다. 어떤 프로그래밍 도전이 있더라도, 주로 이 과목에서 문제를 가져옵니다.


7
00:00:58,580 --> 00:01:07,740
그래서 이 과목은 학생들에게 도전적인 과목 중 하나입니다. 다양한 문제를 해결할 기회를 얻고, 문제 해결을 위한 전략이나 접근 방식을 배울 수 있습니다.


8
00:01:09,480 --> 00:01:17,500
일부 학생들은 이를 제대로 이해하지 못해 문제 해결을 위한 접근 방식이나 전략을 얻지 못합니다.


9
00:01:17,920 --> 00:01:24,220
그리고 그들은 프로그램의 논리 개발이나 전략 개발에서 부족함을 느낍니다.


10
00:01:25,500 --> 00:01:31,520
그래서 저는 기본부터 깊이까지 모든 것을 깊이 있게 다룰 것입니다.


11
00:01:33,100 --> 00:01:36,920
그래서 여러분이 이 과목에서 어떤 유형의 질문에도 답할 수 있도록 할 것입니다.


12
00:01:38,440 --> 00:01:46,920
제가 다룰 주제는 질문을 보자마자 답을 얻을 수 있도록 할 것입니다. 제가 그것을 보장합니다.


13
00:01:48,960 --> 00:01:54,020
그래서 저는 질문 해결에 유용한 포인트들을 다룰 것입니다.


14
00:01:55,880 --> 00:02:05,980
일부 취업 면접이나 다른 시험, 또는 GATE 시험 같은 입학 시험에서도 알고리즘에서 문제를 출제합니다. 이 과목은 그곳에서도 중요한 과목 중 하나입니다.


15
00:02:05,980 --> 00:02:10,140
그래서 여러분은 그곳에서 어떤 유형의 질문에도 답할 수 있을 것입니다.


16
00:02:10,860 --> 00:02:22,140
강의를 순서대로 시청해야 합니다. 각 주제에 번호를 부여할 것이므로 그 순서를 따르고, 순서를 따라야 합니다. 주요 주제를 작은 주제로 나눌 수도 있기 때문입니다.


17
00:02:23,620 --> 00:02:32,720
또 한 가지 중요한 점은, 여러분의 피드백이 저에게 매우 중요하다는 것입니다. 이미 프레젠테이션과 다른 도구를 사용하여 몇 가지 비디오를 준비했습니다.


18
00:02:32,720 --> 00:02:41,040
하지만 이제는 화이트보드로 강의를 하고 있습니다. 그래서 비디오 품질과 오디오 품질에 대해 익숙하지 않을 수 있습니다.


19
00:02:41,440 --> 00:02:47,560
그래서 기술적으로 설정이 완료되면, 여러분의 피드백이 필요합니다. 비디오를 더 좋게 만들 수 있도록 말이죠.


20
00:02:48,540 --> 00:03:00,680
그래서 여러분의 피드백은 제가 여러분의 기기에서 비디오 품질과 오디오 품질을 어떻게 얻고 있는지 알기 위해 중요합니다. 다양한 기기에서 확인했는데 결과가 다르게 나왔습니다.


21
00:03:00,680 --> 00:03:07,340
그래서 어떤 기기를 사용하고 있는지, 무엇을 개선해야 하는지, 목소리나 다른 것들에 대해 피드백이 필요합니다.


22
00:03:08,420 --> 00:03:19,440
알고리즘이란 무엇인지 소개부터 시작해 봅시다. 알고리즘이란 무엇인가요? 왜 작성되나요? 언제 작성되나요? 누가 작성하나요? 이 질문들에 대한 답을 찾아봅시다.


23
00:03:19,440 --> 00:03:28,940
알고리즘의 정의를 보면, 모두가 알고 있는 공통된 정의입니다. 이는 계산 문제를 해결하기 위한 단계별 절차입니다.


24
00:03:29,620 --> 00:03:34,700
네, 이는 계산 문제를 해결하기 위한 단계별 절차입니다. 그렇다면 프로그램이란 무엇일까요?


25
00:03:35,360 --> 00:03:43,040
프로그램도 문제를 해결하기 위한 단계별 절차입니다. 그렇다면 프로그램과 알고리즘의 차이점은 무엇일까요?


26
00:03:43,040 --> 00:03:50,040
프로그램과 알고리즘을 비교함으로써 알고리즘의 중요성과 의미를 이해할 수 있습니다.


27
00:03:51,160 --> 00:04:14,520
한번 살펴봅시다. 여기 알고리즘이 있고, 여기 프로그램이 있습니다. 첫 번째 차이점을 봅시다.


28
00:04:14,520 --> 00:04:22,020
소프트웨어 개발 생명 주기를 알고 있다면, 소프트웨어 프로젝트 개발의 단계들을 알 것입니다.


29
00:04:22,760 --> 00:04:29,940
소프트웨어 프로젝트 개발의 단계 중 두 가지 중요한 단계가 있습니다. 설계 단계와 구현 단계입니다.


30
00:04:30,720 --> 00:04:38,580
만약 그것에 대해 잘 모른다면, 제가 설명해 드리겠습니다. 무엇이든 제조하거나 엔지니어링 절차로 무언가를 구성하려면,

31
00:04:38,580 --> 00:04:47,380
첫 번째 단계, 중요한 단계 중 하나는 설계입니다. 먼저 설계를 하고, 설계를 완벽하고 철저하게 만드세요.


32
00:04:47,380 --> 00:04:55,200
그래야 무엇을 만들고 개발할지 이해할 수 있습니다. 개발할 것이 확실해지면 개발을 시작합니다.


33
00:04:56,460 --> 00:05:01,900
시행착오로는 아무것도 개발하거나 만들 수 없습니다.


34
00:05:01,900 --> 00:05:08,320
무언가를 만들고, 잘못된 것을 알게 되어 파괴하고 다시 새로 만드는 식으로는 안 됩니다.


35
00:05:08,900 --> 00:05:17,600
하지만 소프트웨어 공학에서는 쉽습니다. 소프트웨어 엔지니어는 프로그램을 작성하고 마음을 바꿔 프로그램을 삭제하고 다시 작성할 수 있습니다.


36
00:05:18,400 --> 00:05:25,720
그래서 쓸모없는 프로그램을 작성하는 데 많은 시간을 낭비했다는 느낌을 받지 않습니다.


37
00:05:26,500 --> 00:05:30,920
그래서 요점은, 먼저 설계를 하고 그 다음에 프로그램을 작성하는 것입니다.


38
00:05:30,920 --> 00:05:37,060
설계할 때 무엇을 사용하나요? 프로그램을 작성하지 않는다면 무엇을 작성하나요?


39
00:05:37,600 --> 00:05:49,700
같은 프로그램을 간단한 영어 문장으로 작성합니다. 이해하기 쉽도록 적절한 문법을 사용하지 않고, 컴퓨터가 아닌 종이에 작성할 수도 있습니다.


40
00:05:51,540 --> 00:05:59,320
또는 기계를 사용하더라도 특정 언어로 작성하지 않고 MS 워드나 메모장 같은 응용 프로그램에 작성할 수 있습니다.


41
00:05:59,320 --> 00:06:06,180
그래서 프로그램이 어떻게 작동할지 익숙해지는 것입니다. 그것이 바로 알고리즘(Algorithm)입니다.


42
00:06:07,280 --> 00:06:24,290
알고리즘은 설계 단계에서 작성됩니다. 프로그램은 구현 단계에서 작성됩니다.


43
00:06:26,810 --> 00:06:39,710
설계 단계와 구현 단계. 먼저 절차가 무엇을 할지, 소프트웨어가 무엇을 할지 설계하고 그 설계를 프로그램으로 변환합니다.


44
00:06:41,310 --> 00:06:49,670
그럼 설계를 하는 사람은 누구인가요? 프로그래머가 그 일을 하나요? 네, 프로그래머가 할 수 있다면 할 수 있습니다.


45
00:06:49,910 --> 00:06:59,470
그렇지 않다면 이 일을 하는 사람은 도메인 지식, 문제에 대한 지식, 문제와 그 해결책에 대한 지식을 가져야 합니다.


46
00:07:00,170 --> 00:07:05,070
문제를 이해하고 도메인 지식을 가진 사람이 해결책을 제시할 수 있습니다.


47
00:07:05,070 --> 00:07:13,090
예를 들어 회계 소프트웨어나 알고리즘을 개발한다면 회계사는 회계를 더 잘 이해할 수 있습니다.


48
00:07:14,110 --> 00:07:25,490
또는 병원을 위한 응용 프로그램을 작성하거나 개발한다면, 의사나 병원의 행정 직원이 프로그래머보다 시스템을 더 잘 이해할 수 있습니다.


49
00:07:26,150 --> 00:07:33,750
그래서 주로 응용 프로그램이 개발되는 도메인에 대한 지식을 가진 사람이 알고리즘을 작성할 수 있습니다.


50
00:07:33,750 --> 00:07:44,610
그래서 작성하는 사람은 도메인 지식을 가져야 합니다.


51
00:07:46,010 --> 00:07:57,440
프로그램은 누가 작성하나요? 프로그래머입니다. 프로그래머도 도메인 지식을 가질 수 있습니다.


52
00:07:57,600 --> 00:08:02,760
그렇다면 그는 설계자로서 행동하고 여기서는 프로그래머로서 행동합니다.


53
00:08:04,520 --> 00:08:10,020
다음으로 알고리즘을 작성하는 데 사용되는 언어는 무엇인가요? 어떤 언어든 사용할 수 있습니다.


54
00:08:12,940 --> 00:08:18,160
어떤 언어든 가능합니다. 어떤 언어든 가능하다는 것은 영어 같은 언어나 수학적 표기법을 사용할 수 있다는 뜻입니다.


55
00:08:19,400 --> 00:08:23,380
영어와 같은 언어로 작성하면 단락이나 요약을 작성하는 것과 비슷할 것입니다.


56
00:08:23,860 --> 00:08:30,160
하지만 작성하지 마세요. 원한다면 수학적 표기법을 사용할 수도 있습니다. 수학적 표기법을 사용하는 것이 더 좋습니다.


57
00:08:32,160 --> 00:08:37,080
그래서 어떤 언어든 사용할 수 있습니다. 어떤 언어든 가능하다는 것은 영어 언어나 수학적 표기법을 사용할 수 있다는 뜻입니다.


58
00:08:37,080 --> 00:08:42,020
사용하는 사람들이 이해할 수 있는 한 가능합니다.


59
00:08:42,840 --> 00:08:47,480
예를 들어, 디자이너가 알고리즘을 작성했다면, 프로그래머가 그것에 대한 프로그램을 작성할 것입니다.


60
00:08:47,880 --> 00:08:51,860
따라서 디자이너도 이해해야 하고 프로그래머도 그것을 이해해야 합니다.

61
00:08:52,720 --> 00:08:57,920
그래서 그 프로젝트에 참여하는 프로그래머 팀은 이를 이해할 수 있어야 합니다.


62
00:08:57,920 --> 00:09:02,080
그 다음, 이것은 오직 프로그래밍 언어로만 작성됩니다.


63
00:09:03,920 --> 00:09:13,000
C++, Java, Python 같은 언어로 프로그램을 개발할 수 있습니다.


64
00:09:15,300 --> 00:09:26,620
다음으로 중요한 점은 알고리즘을 작성할 때 하드웨어와 소프트웨어, 즉 운영체제에 독립적이라는 것입니다.


65
00:09:26,620 --> 00:09:33,780
어떤 하드웨어를 사용할지, 기계의 구성은 어떤지, 운영체제는 무엇인지에 의존하지 않습니다.


66
00:09:33,980 --> 00:09:38,920
리눅스 운영체제든 윈도우 운영체제든 상관없습니다.


67
00:09:39,240 --> 00:09:44,620
하지만 프로그램을 작성할 때는 하드웨어와 운영체제에 의존합니다.


68
00:09:45,440 --> 00:09:53,000
그래서 프로그램을 개발할 때는 실행할 하드웨어와 운영체제를 선택해야 합니다.


69
00:09:53,000 --> 00:10:00,320
리눅스를 위해 하거나 윈도우를 위해 할 수도 있습니다. 방법과 환경이 다릅니다.


70
00:10:01,800 --> 00:10:02,540
이것이 중요합니다.


71
00:10:04,880 --> 00:10:10,540
다음으로, 알고리즘을 작성한 후에는 분석합니다. 알고리즘을 분석합니다.


72
00:10:10,820 --> 00:10:21,540
즉, 우리가 결과를 완벽하게 달성하고 있는지, 알고리즘이 시간과 공간 측면에서 효율적인지 연구합니다.


73
00:10:21,540 --> 00:10:30,340
분석이 무엇을 의미하는지 살펴보겠습니다. 그래서 알고리즘을 분석합니다.


74
00:10:32,180 --> 00:10:35,560
프로그램은 어떻게 할까요? 프로그램을 공부할 필요는 없습니다.


75
00:10:35,780 --> 00:10:39,200
이미 프로그램이 있으니 그냥 실행하고 확인하면 됩니다.


76
00:10:39,400 --> 00:10:45,800
그래서 우리는 프로그램을 테스트합니다.


77
00:10:47,260 --> 00:10:53,160
이것이 알고리즘과 프로그램의 몇 가지 차이점입니다.


78
00:10:53,160 --> 00:10:56,880
이 차이점들은 알고리즘이 무엇인지 이해하는 데 도움이 될 것입니다.


79
00:10:59,240 --> 00:10:59,460
좋습니다.


80
00:11:00,860 --> 00:11:05,100
이제 한 가지 더 말씀드리겠습니다. 우리가 사용하는 언어의 문법입니다.


81
00:11:05,800 --> 00:11:12,220
어떤 언어든 사용할 수 있습니다. 하지만 실제로 알고리즘을 작성하고 사용하는 사람들은 누구일까요?


82
00:11:12,360 --> 00:11:15,940
대학 졸업생 출신의 프로그래머들입니다.


83
00:11:16,280 --> 00:11:19,680
대부분의 대학 졸업생은 최소한 C 언어를 알고 있습니다.


84
00:11:20,420 --> 00:11:24,890
그래서 요즘은 알고리즘이라는 이름으로 C 언어 프로그램만 작성합니다.


85
00:11:26,440 --> 00:11:29,920
그래서 장점은 모두가 C 언어를 알고 있다는 것입니다.


86
00:11:30,860 --> 00:11:37,840
그래서 다른 언어를 사용해 혼란을 주기보다는 C 언어만 사용해서 모두가 이해할 수 있게 합니다.


87
00:11:39,000 --> 00:11:43,400
그래서 학교 수준에서도 C 언어가 가르쳐져서 모두가 C 언어에 익숙합니다.


88
00:11:44,100 --> 00:11:47,320
그래서 알고리즘을 작성할 때 C 언어 문법을 사용할 수 있습니다.

