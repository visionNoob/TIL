1
00:00:00,000 --> 00:00:07,240
다시 돌아오신 것을 환영합니다. 몇 가지 코드 조각을 가져와서 분석하는 방법과 시간 복잡도를 찾는 방법을 보여드리겠습니다.


2
00:00:07,800 --> 00:00:14,120
이것은 간단한 반복문입니다. 전체 알고리즘을 작성하는 것이 아니라, 하나의 문장이 있는 코드 조각을 작성했습니다.


3
00:00:14,680 --> 00:00:19,300
이제 우리는 이것에 익숙합니다. 이것이 n 플러스 1번 실행된다는 것을 알고 있습니다.


4
00:00:19,660 --> 00:00:23,440
그리고 이것은 n번 실행됩니다. 우리는 이 시간을 원하지 않습니다.


5
00:00:24,540 --> 00:00:27,660
왜냐하면 어쨌든 차수를 쓸 때, 우리는 차수를 쓰고 있기 때문입니다.


6
00:00:27,660 --> 00:00:31,640
그래서 이것은 차수에 전혀 영향을 미치지 않습니다. 그래서 동일하게 유지됩니다.


7
00:00:31,980 --> 00:00:35,080
그래서 우리는 문장이 몇 번 실행되는지만 알면 됩니다.


8
00:00:35,720 --> 00:00:38,100
그게 전부입니다. 그래서 이것은 n의 차수입니다.


9
00:00:40,580 --> 00:00:43,100
이것은 피할 수 있습니다. 이것을 건너뛰세요.


10
00:00:47,980 --> 00:00:48,220
다음.


11
00:00:49,160 --> 00:00:59,580
만약 이 반복문이 n에서 시작하고 조건이 1 또는 0보다 크며 이것이 감소하고 있다면,


12
00:00:59,580 --> 00:01:03,080
이 반복문은 감소하고 있는 것입니다.


13
00:01:03,800 --> 00:01:07,640
그렇다면 이 문장도 n번 실행됩니다.


14
00:01:07,860 --> 00:01:08,660
그리고 이것은 n의 차수입니다.


15
00:01:09,920 --> 00:01:16,440
1에서 10까지 가든, 10단계든, 10에서 1로 오든, 10단계입니다.


16
00:01:17,020 --> 00:01:20,520
그래서 1에서 10으로 가든 10에서 1로 오든, 같은 단계 수입니다.


17
00:01:20,620 --> 00:01:24,940
그래서 n에서 0으로 가는 것입니다. 그래서 이것도 n의 차수입니다.


18
00:01:26,100 --> 00:01:34,660
만약 이것이 1에서 시작하고 조건이 n보다 작으며 i가 2씩 증가한다면,


19
00:01:36,520 --> 00:01:41,180
이 문장은 n번 반복되지 않고 n의 절반만큼 반복됩니다.


20
00:01:42,280 --> 00:01:43,020
n 나누기 2입니다.


21
00:01:45,180 --> 00:01:53,000
만약 n 나누기 2라면, 함수가 n 나누기 2라고 할 때, 다항식의 차수는 무엇입니까?


22
00:01:53,000 --> 00:01:56,440
n입니다. 그래서 이것도 n의 차수입니다.


23
00:01:57,360 --> 00:01:59,960
이 경우에도 n의 차수입니다.


24
00:02:00,860 --> 00:02:05,860
심지어 20씩 증가하더라도, 이것은 20입니다.


25
00:02:06,200 --> 00:02:09,620
다항식의 차수는 n입니다. 그래서 이것도 n의 차수입니다.


26
00:02:10,720 --> 00:02:17,640
그래서 n 나누기 무엇이든, 증가하는 횟수가 무엇이든, 시간은 동일합니다.


27
00:02:18,440 --> 00:02:18,940
다음.


28
00:02:19,380 --> 00:02:20,960
우리는 이것에 이미 익숙합니다.


29
00:02:20,960 --> 00:02:25,320
이것들은 두 개의 반복문, 중첩된 반복문입니다. 하나가 다른 하나 안에 있습니다.


30
00:02:25,880 --> 00:02:28,340
그리고 이것은 n번 실행된다는 것을 알고 있습니다.

31
00:02:28,880 --> 00:02:32,120
그래서 이것도 n번이고 이것도 n번입니다.


32
00:02:32,580 --> 00:02:33,620
사실은 n 플러스 1입니다.


33
00:02:34,300 --> 00:02:39,740
하지만 이건 어떨까요? 이것도 n 플러스 1번 반복되고, 이건 n번 반복됩니다.


34
00:02:40,220 --> 00:02:44,620
그리고 이것은 n 제곱의 순서입니다.


35
00:02:46,480 --> 00:02:49,340
다음은 다시 중첩된 for 루프입니다.


36
00:02:49,340 --> 00:02:52,540
이것은 이전 것과 비슷해 보이지만 그렇지 않습니다.


37
00:02:53,340 --> 00:02:55,720
보세요, i는 0부터 n보다 작습니다.


38
00:02:55,980 --> 00:02:58,140
하지만 j는 i보다 작습니다.


39
00:02:59,100 --> 00:03:00,000
여기 차이가 있습니다.


40
00:03:00,940 --> 00:03:06,040
그래서 이것을 추적하여 얼마나 시간이 걸리는지 분석해 봅시다.


41
00:03:06,960 --> 00:03:12,380
그래서 이를 위해 i 값과 j 값을 추적하겠습니다.


42
00:03:14,060 --> 00:03:14,720
시작해 봅시다.


43
00:03:14,720 --> 00:03:16,800
처음에 i는 0입니다.


44
00:03:17,660 --> 00:03:22,020
i가 0일 때, j는 0부터 시작하고 0이 0보다 작나요?


45
00:03:22,200 --> 00:03:25,000
아니요, 한 번도 실행되지 않습니다.


46
00:03:25,460 --> 00:03:29,160
그래서 이 문장이 몇 번 실행되는지 찾아야 합니다.


47
00:03:29,920 --> 00:03:31,320
그래서 실행 횟수입니다.


48
00:03:32,380 --> 00:03:34,820
전혀 실행되지 않으므로 0번입니다.


49
00:03:36,180 --> 00:03:37,120
그럼 이 루프가 끝납니다.


50
00:03:37,780 --> 00:03:39,340
다시, i 플러스 플러스.


51
00:03:40,100 --> 00:03:41,180
i는 1이 됩니다.


52
00:03:41,660 --> 00:03:43,240
i는 n보다 작다고 가정합시다.


53
00:03:43,240 --> 00:03:44,720
안으로 들어갑니다.


54
00:03:45,360 --> 00:03:46,220
다시 이 루프입니다.


55
00:03:46,740 --> 00:03:47,000
0.


56
00:03:47,380 --> 00:03:48,460
0은 i보다 작습니다.


57
00:03:48,840 --> 00:03:50,400
네, 0일 때 실행됩니다.


58
00:03:51,380 --> 00:03:52,340
그 다음 j 플러스 플러스.


59
00:03:52,940 --> 00:03:54,140
j는 1입니다.


60
00:03:54,520 --> 00:03:55,760
1은 i보다 작지 않습니다.

61
00:03:55,980 --> 00:03:57,700
그래서 1일 때는 실행되지 않습니다.


62
00:03:58,240 --> 00:03:59,820
그래서 몇 번 실행되었나요?


63
00:04:00,180 --> 00:04:01,200
한 번입니다.


64
00:04:04,100 --> 00:04:05,440
그 다음 다시 올라갑니다.


65
00:04:06,300 --> 00:04:07,040
i 플러스 플러스.


66
00:04:07,620 --> 00:04:08,700
i는 2가 됩니다.


67
00:04:09,200 --> 00:04:11,540
그 다음 j는 0, 1에서 실행됩니다.


68
00:04:11,540 --> 00:04:13,360
그리고 2가 되면 멈춥니다.


69
00:04:15,460 --> 00:04:17,540
그래서 이건 2번 반복됩니다.


70
00:04:18,060 --> 00:04:22,740
그리고 i가 3일 때, j는 0, 1, 2, 3을 가집니다.


71
00:04:23,200 --> 00:04:24,880
그래서 이건 3번 반복됩니다.


72
00:04:25,420 --> 00:04:26,800
그리고 이 과정은 계속됩니다.


73
00:04:27,660 --> 00:04:30,160
보세요, i가 0일 때는 실행되지 않았습니다.


74
00:04:30,420 --> 00:04:33,040
i가 1일 때는 한 번 실행되었습니다.


75
00:04:33,240 --> 00:04:33,920
이것이 문장입니다.


76
00:04:34,400 --> 00:04:38,580
i가 2일 때는 2번, 3일 때는 3번, 계속해서.


77
00:04:39,640 --> 00:04:40,160
계속해서.


78
00:04:40,160 --> 00:04:40,760
어디까지?


79
00:04:40,760 --> 00:04:41,500
n까지.


80
00:04:42,220 --> 00:04:47,180
그래서 총, n일 때, 몇 번 실행될까요?


81
00:04:47,480 --> 00:04:48,160
n번입니다.


82
00:04:49,020 --> 00:04:51,100
i가 3일 때, 그래서 3번입니다.


83
00:04:51,740 --> 00:04:56,160
그래서 n까지 도달하면, 실제로는 n보다 작지만, n이라고 합시다.


84
00:04:56,480 --> 00:04:59,060
n까지 도달하면, 10번 실행됩니다.


85
00:04:59,620 --> 00:05:01,900
그래서 총 몇 번 실행되었나요?


86
00:05:03,300 --> 00:05:03,960
이것입니다.


87
00:05:07,900 --> 00:05:08,140
맞죠?


88
00:05:08,640 --> 00:05:12,160
그래서 n까지 간다고 가정합니다, 실제로는 n까지는 아닙니다.


89
00:05:12,160 --> 00:05:13,460
n보다 작습니다.


90
00:05:13,500 --> 00:05:13,900
몇 번인가요?

91
00:05:14,580 --> 00:05:18,060
1 더하기 2 더하기 3 더하기 계속해서 n까지.


92
00:05:18,600 --> 00:05:22,100
이것은 n 곱하기 n 더하기 1 나누기 2와 같습니다.


93
00:05:24,740 --> 00:05:26,360
이것의 차수는 무엇인가요?


94
00:05:27,100 --> 00:05:32,940
f(n)은 n 제곱 더하기 1 나누기 2, 차수는 제곱입니다.


95
00:05:33,400 --> 00:05:35,500
그래서 n 제곱의 차수입니다.


96
00:05:38,000 --> 00:05:41,280
그래서 시간 복잡도는 n 제곱의 차수입니다.


97
00:05:41,280 --> 00:05:46,320
이것이 이전 것과 비슷하지 않지만, 분석해보면 답은


98
00:05:46,320 --> 00:05:47,820
n 제곱으로 나옵니다.


99
00:05:48,280 --> 00:05:50,420
다항식의 차수는 n 제곱입니다.


100
00:05:51,440 --> 00:05:57,480
다음 코드는 여기서 p가 0으로 초기화되고, 루프가 n번 실행되지 않습니다.


101
00:05:57,480 --> 00:05:58,840
이 p를 보세요.


102
00:05:59,340 --> 00:05:59,940
p는 n 이하입니다.


103
00:06:00,280 --> 00:06:02,100
i가 n 이하가 아닙니다.


104
00:06:02,420 --> 00:06:04,340
그래서 조건이 다릅니다.


105
00:06:04,480 --> 00:06:05,640
그럼 p는 무엇인가요?


106
00:06:06,320 --> 00:06:07,020
p는 처음에 0이고 매번 i가 p에 더해집니다.


107
00:06:07,020 --> 00:06:11,040
p는 처음에 0이고 매번 i가 p에 더해집니다.


108
00:06:11,520 --> 00:06:13,900
그래서 몇 번 실행될지 모릅니다.


109
00:06:15,240 --> 00:06:15,800
분석해봅시다.


110
00:06:16,660 --> 00:06:19,400
i 값과 p 값을 가져오겠습니다.


111
00:06:19,720 --> 00:06:22,280
처음에는 0이고 이것은 1입니다.


112
00:06:23,840 --> 00:06:25,320
첫 번째로 무슨 일이 일어나나요?


113
00:06:25,800 --> 00:06:28,260
이 1이 더해져서 1이 됩니다.


114
00:06:28,640 --> 00:06:29,840
다음에는 2가 됩니다.


115
00:06:30,300 --> 00:06:31,500
그래서 1 더하기 2가 됩니다.


116
00:06:32,160 --> 00:06:32,960
그래서 3이 됩니다.


117
00:06:32,960 --> 00:06:38,020
다음에는 i가 3이 되고 이것은 1 더하기 2 더하기 3이 됩니다.


118
00:06:38,640 --> 00:06:44,020
그 다음 i가 4가 되면 1 더하기 2 더하기 3 더하기 4가 계속됩니다.


119
00:06:47,420 --> 00:06:49,420
몇 번 실행될까요?


120
00:06:49,980 --> 00:06:52,200
k번 실행될 것입니다.

121
00:06:54,980 --> 00:06:56,180
그래서 이게 뭐가 될까요?


122
00:06:56,700 --> 00:07:01,560
1 더하기 2 더하기 3 더하기 4 더하기 계속해서 k번까지.


123
00:07:01,560 --> 00:07:03,120
왜 여기 k를 썼을까요?


124
00:07:03,460 --> 00:07:07,080
n번 반복되는 게 아니기 때문입니다.


125
00:07:07,600 --> 00:07:11,600
확실히 몇 번 반복되는지는 모르지만 반복됩니다.


126
00:07:11,960 --> 00:07:14,860
n번 실행되지 않는다는 것은 확실합니다.


127
00:07:15,140 --> 00:07:16,000
그럼 몇 번일까요?


128
00:07:16,460 --> 00:07:17,680
조건이 다르기 때문입니다.


129
00:07:18,080 --> 00:07:21,020
그래서 k라고 하고 그 k를 찾아봅시다.


130
00:07:22,180 --> 00:07:26,120
k번 반복된다면 조건은 무엇일까요?


131
00:07:27,640 --> 00:07:32,560
p가 n보다 커졌다고 가정합니다.


132
00:07:32,980 --> 00:07:35,340
그래서 p가 n보다 커지면 멈춥니다.


133
00:07:35,960 --> 00:07:36,780
이렇게 가정합니다.


134
00:07:37,600 --> 00:07:42,560
p가 n보다 작은 동안 반복되다가, p가 n보다 커지면 멈춥니다.


135
00:07:46,120 --> 00:07:47,620
p는 무엇일까요?


136
00:07:48,220 --> 00:07:53,500
Cp, 즉 k 곱하기 k 더하기 1 나누기 2입니다.


137
00:07:54,800 --> 00:07:57,240
p는 k 곱하기 k 더하기 1 나누기 2입니다.


138
00:07:57,600 --> 00:07:58,840
그럼 조건은 무엇일까요?


139
00:07:59,720 --> 00:08:04,280
k 곱하기 k 더하기 1 나누기 2가 n보다 큽니다.


140
00:08:05,620 --> 00:08:10,760
그래서 k 곱하기 k 더하기 1 나누기 2가 n보다 커지면 멈춥니다.


141
00:08:11,640 --> 00:08:12,420
그럼 k는 무엇일까요?


142
00:08:14,360 --> 00:08:17,340
대략적으로 k 제곱이라고 가정합니다.


143
00:08:18,600 --> 00:08:19,300
그럼 k는 무엇일까요?


144
00:08:19,940 --> 00:08:22,980
k는 루트 n입니다.


145
00:08:24,440 --> 00:08:25,900
k는 루트 n입니다.


146
00:08:26,220 --> 00:08:32,020
그래서 이 루프는 루트 n번 실행됩니다.


147
00:08:34,440 --> 00:08:35,640
빠르게 보여드리겠습니다.


148
00:08:36,140 --> 00:08:37,060
i는 1입니다.


149
00:08:37,680 --> 00:08:39,240
i p는 n보다 작거나 같습니다.


150
00:08:39,440 --> 00:08:40,040
i 증가.

151
00:08:40,460 --> 00:08:42,400
이것은 i가 n보다 작거나 같은 것이 아닙니다.


152
00:08:42,400 --> 00:08:45,080
그래서 몇 번 반복되는지 알 수 없습니다.


153
00:08:47,380 --> 00:08:49,200
i는 여기 있고, p는 여기 있습니다.


154
00:08:49,540 --> 00:08:53,900
그래서 i 값이 증가하고 매번 i가 p에 더해집니다.


155
00:08:54,440 --> 00:08:55,800
그래서 몇 번인지 알 수 없습니다.


156
00:08:56,020 --> 00:08:57,240
그래서 k번이라고 해봅시다.


157
00:08:57,980 --> 00:09:00,420
그리고 이것은 1 더하기 2 더하기 2부터 k까지입니다.


158
00:09:04,360 --> 00:09:04,800
맞죠?


159
00:09:06,540 --> 00:09:10,660
그래서 k는 p가 k 곱하기 k 더하기 1 나누기 2입니다.


160
00:09:10,660 --> 00:09:14,340
그래서 p가 n보다 작거나 같은 동안 반복된다는 것을 압니다.


161
00:09:14,440 --> 00:09:16,760
그래서 p가 n보다 커지면 멈춥니다.


162
00:09:16,920 --> 00:09:18,820
p가 n보다 커지면 멈춥니다.


163
00:09:19,080 --> 00:09:21,340
그래서 k 곱하기 k 더하기 1 나누기 2가 n보다 커지면 멈춥니다.


164
00:09:21,440 --> 00:09:22,060
멈출 것입니다.


165
00:09:22,680 --> 00:09:25,620
그래서 이것은 k 제곱이고 k는 루트 n입니다.


166
00:09:26,980 --> 00:09:29,400
다음 비디오에서 더 많은 예제를 찾을 수 있습니다.


167
00:09:30,960 --> 00:09:32,700
그래서 다양한 유형의 코드들입니다.


168
00:09:32,920 --> 00:09:35,440
제가 보여드리고 분석하는 방법을 보여드리겠습니다.


169
00:09:36,520 --> 00:09:38,960
그래서 이렇게 추적하여 분석할 수 있습니다.


170
00:09:38,960 --> 00:09:43,220
다른 비디오, 다음 비디오에서도 추적과 함께 몇 가지 알고리즘을 찾을 수 있습니다.

